import time
import random
import requests
from bs4 import BeautifulSoup
from config import Config
import logging

class FunPayManager:
    def __init__(self):
        self.base_url = Config.FUNPAY_BASE_URL
        self.login = Config.FUNPAY_LOGIN
        self.password = Config.FUNPAY_PASSWORD
        self.session = requests.Session()
        self.is_logged_in = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
        })
    
    def login_to_funpay(self):
        """–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç FunPay —á–µ—Ä–µ–∑ API"""
        try:
            self.logger.info("üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ FunPay...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
            login_page = self.session.get(f"{self.base_url}/account/login")
            soup = BeautifulSoup(login_page.content, 'html.parser')
            
            # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = soup.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            if not csrf_token:
                self.logger.warning("‚ö†Ô∏è CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞
            login_data = {
                'login': self.login,
                'password': self.password,
            }
            
            if csrf_token:
                login_data['_token'] = csrf_token
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
            response = self.session.post(
                f"{self.base_url}/account/login",
                data=login_data,
                allow_redirects=True
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞
                if 'account' in response.url or 'profile' in response.url:
                    self.is_logged_in = True
                    self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ FunPay")
                    return True
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
                    soup = BeautifulSoup(response.content, 'html.parser')
                    if soup.find('a', {'href': '/account/logout'}) or soup.find('div', {'class': 'user-menu'}):
                        self.is_logged_in = True
                        self.logger.info("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ FunPay (–ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã)")
                        return True
            
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ FunPay")
            return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ FunPay: {e}")
            return False
    
    def get_orders(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            
            self.logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
            
            response = self.session.get(f"{self.base_url}/account/orders")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            orders = []
            
            # –ò—â–µ–º –∑–∞–∫–∞–∑—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            order_elements = soup.find_all('div', {'class': 'order-item'})
            
            for order_elem in order_elements:
                try:
                    order = {
                        'id': order_elem.get('data-order-id', ''),
                        'title': order_elem.find('h3').text.strip() if order_elem.find('h3') else '',
                        'status': order_elem.find('span', {'class': 'status'}).text.strip() if order_elem.find('span', {'class': 'status'}) else '',
                        'price': order_elem.find('span', {'class': 'price'}).text.strip() if order_elem.find('span', {'class': 'price'}) else '',
                        'created_at': order_elem.find('span', {'class': 'date'}).text.strip() if order_elem.find('span', {'class': 'date'}) else ''
                    }
                    orders.append(order)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–∫–∞–∑–∞: {e}")
                    continue
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
            return orders
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
            return []
    
    def get_reviews(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return []
            
            self.logger.info("‚≠ê –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤...")
            
            response = self.session.get(f"{self.base_url}/account/reviews")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {response.status_code}")
                return []
            
            soup = BeautifulSoup(response.content, 'html.parser')
            reviews = []
            
            # –ò—â–µ–º –æ—Ç–∑—ã–≤—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
            review_elements = soup.find_all('div', {'class': 'review-item'})
            
            for review_elem in review_elements:
                try:
                    review = {
                        'id': review_elem.get('data-review-id', ''),
                        'author': review_elem.find('span', {'class': 'author'}).text.strip() if review_elem.find('span', {'class': 'author'}) else '',
                        'rating': review_elem.find('span', {'class': 'rating'}).text.strip() if review_elem.find('span', {'class': 'rating'}) else '',
                        'text': review_elem.find('div', {'class': 'text'}).text.strip() if review_elem.find('div', {'class': 'text'}) else '',
                        'created_at': review_elem.find('span', {'class': 'date'}).text.strip() if review_elem.find('span', {'class': 'date'}) else ''
                    }
                    reviews.append(review)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–∑—ã–≤–∞: {e}")
                    continue
            
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(reviews)} –æ—Ç–∑—ã–≤–æ–≤")
            return reviews
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤: {e}")
            return []
    
    def create_rental_listing(self, game_name: str, price_per_hour: float, account_id: str = None):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ FunPay –¥–ª—è –∞—Ä–µ–Ω–¥—ã –∞–∫–∫–∞—É–Ω—Ç–∞
        """
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return None
            
            self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä—ã: {game_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            response = self.session.get(f"{self.base_url}/account/sells/add")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.status_code}")
                return None
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = soup.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            listing_data = {
                'title': f'–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ {game_name}',
                'description': f'–ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ Steam –¥–ª—è –∏–≥—Ä—ã {game_name}. –¶–µ–Ω–∞: {price_per_hour} —Ä—É–±/—á–∞—Å.',
                'price': price_per_hour,
                'category': 'steam-accounts',
                'game': game_name,
            }
            
            if csrf_token:
                listing_data['_token'] = csrf_token
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            response = self.session.post(
                f"{self.base_url}/account/sells/add",
                data=listing_data,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
                return {
                    'success': True,
                    'message': '–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ',
                    'listing_id': 'auto_generated'  # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID
                }
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.status_code}")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return None
    
    def update_listing(self, listing_id: str, new_data: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return False
            
            self.logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            response = self.session.get(f"{self.base_url}/account/sells/edit/{listing_id}")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
                return False
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = soup.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            # –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω –∫ –¥–∞–Ω–Ω—ã–º
            if csrf_token:
                new_data['_token'] = csrf_token
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            response = self.session.post(
                f"{self.base_url}/account/sells/edit/{listing_id}",
                data=new_data,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def delete_listing(self, listing_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è"""
        try:
            if not self.is_logged_in:
                if not self.login_to_funpay():
                    return False
            
            self.logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {listing_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–¥–∞–ª–µ–Ω–∏—è
            response = self.session.get(f"{self.base_url}/account/sells/delete/{listing_id}")
            if response.status_code != 200:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–¥–∞–ª–µ–Ω–∏—è: {response.status_code}")
                return False
            
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º CSRF —Ç–æ–∫–µ–Ω
            csrf_token = None
            csrf_input = soup.find('input', {'name': '_token'})
            if csrf_input:
                csrf_token = csrf_input.get('value')
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            delete_data = {}
            if csrf_token:
                delete_data['_token'] = csrf_token
            
            # –£–¥–∞–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            response = self.session.post(
                f"{self.base_url}/account/sells/delete/{listing_id}",
                data=delete_data,
                allow_redirects=True
            )
            
            if response.status_code == 200:
                self.logger.info("‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def sync_with_funpay(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å FunPay"""
        try:
            self.logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å FunPay...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
            orders = self.get_orders()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
            reviews = self.get_reviews()
            
            self.logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–∫–∞–∑–æ–≤: {len(orders)}, –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}")
            
            return {
                'orders': orders,
                'reviews': reviews,
                'success': True
            }
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å FunPay: {e}")
            return {
                'orders': [],
                'reviews': [],
                'success': False,
                'error': str(e)
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        try:
            self.session.close()
            self.logger.info("üîí –°–µ—Å—Å–∏—è FunPay –∑–∞–∫—Ä—ã—Ç–∞")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏: {e}")
