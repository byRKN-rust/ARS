#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π Telegram –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞—Ä–µ–Ω–¥—ã Steam –∞–∫–∫–∞—É–Ω—Ç–æ–≤
–ë–µ–∑ signal handling –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –≤ Railway
"""

import logging
import asyncio
import os
import sys
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import Config
from database import Database

class SimpleSteamRentalBot:
    def __init__(self):
        self.token = Config.TELEGRAM_TOKEN
        self.admin_id = Config.TELEGRAM_ADMIN_ID
        self.db = Database()
        self.application = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        self.logger = logging.getLogger(__name__)
        
    def setup(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞"""
        self.logger.info(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞...")
        self.logger.info(f"üîë Token: {self.token[:20] if self.token else '–ù–ï –ù–ê–ô–î–ï–ù'}...")
        self.logger.info(f"üë§ Admin ID: {self.admin_id}")
        
        if not self.token:
            self.logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return False
            
        try:
            self.application = Application.builder().token(self.token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("accounts", self.accounts_command))
            self.application.add_handler(CommandHandler("rentals", self.rentals_command))
            self.application.add_handler(CommandHandler("support", self.support_command))
            self.application.add_handler(CommandHandler("admin", self.admin_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.button_callback))
            
            self.logger.info("‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞: {e}")
            return False
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ signal handling"""
        if not self.application:
            self.logger.error("‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
            
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º signal handling
            import signal
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ signal handling
            if hasattr(signal, 'set_wakeup_fd'):
                try:
                    signal.set_wakeup_fd(-1)
                except (ValueError, OSError):
                    pass
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            signal.signal(signal.SIGINT, signal.SIG_IGN)
            signal.signal(signal.SIGTERM, signal.SIG_IGN)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.application.run_polling(
                allowed_updates=Update.ALL_TYPES,
                drop_pending_updates=True,
                close_loop=False
            )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.db.add_user(
            telegram_id=str(user.id),
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        welcome_text = f"""
üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Steam Rental System!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã Steam –¥–ª—è –∏–≥—Ä.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/accounts - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
/rentals - –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/support - –ü–æ–¥–¥–µ—Ä–∂–∫–∞
/help - –°–ø—Ä–∞–≤–∫–∞

üí° –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="show_accounts")],
            [InlineKeyboardButton("üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="show_rentals")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="show_status")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="show_help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/accounts - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
/rentals - –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/support - –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

üîß –ö–∞–∫ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /accounts
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
3. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã
4. –û–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É
5. –ü–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã –ø–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä
‚Ä¢ –ù–µ –∏–∑–º–µ–Ω—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: /support
        """
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            total_accounts = self.db.get_total_accounts()
            available_accounts = self.db.get_available_accounts()
            active_rentals = self.db.get_active_rentals()
            
            status_text = f"""
üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∞—Ä–µ–Ω–¥—ã: {available_accounts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {active_rentals}

üîß –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞
            """
                
        except Exception as e:
            status_text = f"""
‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /support
            """
        
        await update.message.reply_text(status_text)
    
    async def accounts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /accounts"""
        try:
            accounts = self.db.get_available_accounts_list()
            
            if not accounts:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
                return
            
            text = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:\n\n"
            keyboard = []
            
            for i, account in enumerate(accounts[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
                text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{account['id']}\n"
                text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {account.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                text += f"üí∞ –¶–µ–Ω–∞: {account.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±/—á–∞—Å\n\n"
                
                keyboard.append([InlineKeyboardButton(
                    f"–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å #{account['id']}", 
                    callback_data=f"rent_account_{account['id']}"
                )])
            
            if len(accounts) > 10:
                text += f"... –∏ –µ—â–µ {len(accounts) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
    
    async def rentals_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /rentals"""
        user_id = update.effective_user.id
        
        try:
            rentals = self.db.get_user_rentals(user_id)
            
            if not rentals:
                await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
                return
            
            text = "üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä–µ–Ω–¥—ã:\n\n"
            
            for rental in rentals:
                end_time = datetime.fromisoformat(rental['end_time'])
                remaining = end_time - datetime.now()
                
                if remaining.total_seconds() > 0:
                    hours = int(remaining.total_seconds() // 3600)
                    minutes = int((remaining.total_seconds() % 3600) // 60)
                    
                    text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{rental['account_id']}\n"
                    text += f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º\n"
                    text += f"üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time.strftime('%Y-%m-%d %H:%M')}\n\n"
                else:
                    text += f"üéÆ –ê–∫–∫–∞—É–Ω—Ç #{rental['account_id']} - –ò—Å—Ç–µ–∫\n\n"
            
            await update.message.reply_text(text)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥: {e}")
    
    async def support_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support"""
        support_text = """
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:

üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @admin
üìß Email: support@steamrental.com
üí¨ –ß–∞—Ç: @steamrental_support

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7

üîß –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
‚Ä¢ –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Ä–µ–Ω–¥–∞? - –í—Ä–µ–º—è –æ—Ç—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –ß—Ç–æ –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è? - –ü–∞—Ä–æ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
‚Ä¢ –ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å? - –î–∞, –æ–ø–ª–∞—Ç–∏–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏? - –î–∞, –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
        """
        await update.message.reply_text(support_text)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        
        admin_text = """
üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üìä –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
        """
        
        try:
            total_accounts = self.db.get_total_accounts()
            available_accounts = self.db.get_available_accounts()
            active_rentals = self.db.get_active_rentals()
            total_users = self.db.get_total_users()
            
            admin_text += f"""
‚Ä¢ –í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {total_accounts}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥: {active_rentals}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
            """
        except Exception as e:
            admin_text += f"\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üéÆ –ê–∫–∫–∞—É–Ω—Ç—ã", callback_data="admin_accounts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(admin_text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "show_accounts":
            await self.accounts_command(update, context)
        elif data == "show_status":
            await self.status_command(update, context)
        elif data == "show_help":
            await self.help_command(update, context)
        elif data == "show_rentals":
            await self.rentals_command(update, context)
        elif data.startswith("rent_account_"):
            account_id = data.split("_")[2]
            await self.handle_rent_request(update, context, account_id)
        elif data.startswith("rent_time_"):
            parts = data.split("_")
            account_id = parts[2]
            duration = int(parts[3])
            await self.handle_rent_confirmation(update, context, account_id, duration)
        elif data == "admin_stats":
            await self.admin_stats(update, context)
        elif data == "admin_users":
            await self.admin_users(update, context)
        elif data == "admin_accounts":
            await self.admin_accounts(update, context)
        elif data == "admin_back":
            await self.admin_command(update, context)
    
    async def handle_rent_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É"""
        try:
            account = self.db.get_account(account_id)
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            text = f"""
üéÆ –ê—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞ #{account_id}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {account.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
üí∞ –¶–µ–Ω–∞: {account.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±/—á–∞—Å

‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã:
            """
            
            keyboard = [
                [InlineKeyboardButton("1 —á–∞—Å", callback_data=f"rent_time_{account_id}_1")],
                [InlineKeyboardButton("3 —á–∞—Å–∞", callback_data=f"rent_time_{account_id}_3")],
                [InlineKeyboardButton("6 —á–∞—Å–æ–≤", callback_data=f"rent_time_{account_id}_6")],
                [InlineKeyboardButton("12 —á–∞—Å–æ–≤", callback_data=f"rent_time_{account_id}_12")],
                [InlineKeyboardButton("24 —á–∞—Å–∞", callback_data=f"rent_time_{account_id}_24")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="show_accounts")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_rent_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, account_id: str, duration: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã"""
        user_id = update.effective_user.id
        
        try:
            account = self.db.get_account(account_id)
            if not account:
                await update.callback_query.edit_message_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä–µ–Ω–¥—É
            success = self.db.create_rental(int(account_id), str(user_id), duration)
            
            if success:
                total_cost = duration * account.get('price', 50)
                
                text = f"""
‚úÖ –ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!

üéÆ –ê–∫–∫–∞—É–Ω—Ç: #{account_id}
üìù –ò–≥—Ä–∞: {account['game_name']}
‚è∞ –í—Ä–µ–º—è: {duration} —á–∞—Å–æ–≤
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±

üìã –î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
üë§ –õ–æ–≥–∏–Ω: {account['username']}
üîë –ü–∞—Ä–æ–ª—å: (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ)

‚ö†Ô∏è –í–∞–∂–Ω–æ:
‚Ä¢ –ù–µ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
‚Ä¢ –ù–µ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –¥—Ä—É–∑–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–≥—Ä

‚è∞ –í—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {duration} —á–∞—Å–æ–≤
                """
                
                keyboard = [
                    [InlineKeyboardButton("üìã –ú–æ–∏ –∞—Ä–µ–Ω–¥—ã", callback_data="show_rentals")],
                    [InlineKeyboardButton("üéÆ –ï—â–µ –∞–∫–∫–∞—É–Ω—Ç—ã", callback_data="show_accounts")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä–µ–Ω–¥—É. –ê–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É–∂–µ –∑–∞–Ω—è—Ç.")
                
        except Exception as e:
            await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {e}")
    
    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            stats = self.db.get_detailed_stats()
            
            text = """
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üéÆ –ê–∫–∫–∞—É–Ω—Ç—ã:
‚Ä¢ –í—Å–µ–≥–æ: {total_accounts}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_accounts}
‚Ä¢ –í –∞—Ä–µ–Ω–¥–µ: {rented_accounts}
‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {blocked_accounts}

üìà –ê—Ä–µ–Ω–¥—ã:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_rentals}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {completed_today}
‚Ä¢ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} —Ä—É–±

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_users_today}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {new_users_today}
            """.format(**stats)
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            users = self.db.get_users_list()
            
            text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            
            for user in users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                text += f"üë§ ID: {user['user_id']}\n"
                text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user['created_at']}\n"
                text += f"üéÆ –ê—Ä–µ–Ω–¥: {user['rentals_count']}\n\n"
            
            if len(users) > 10:
                text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}"
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def admin_accounts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        user_id = update.effective_user.id
        
        if str(user_id) != self.admin_id:
            return
        
        try:
            accounts = self.db.get_all_accounts()
            
            if not accounts:
                text = "üì≠ –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ."
            else:
                text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤:\n\n"
                
                for account in accounts[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                    status = "üî¥ –í –∞—Ä–µ–Ω–¥–µ" if account['is_rented'] else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
                    text += f"üéÆ #{account['id']} - {account['username']}\n"
                    text += f"üìù –ò–≥—Ä–∞: {account['game_name']}\n"
                    text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                    text += f"üìÖ –°–æ–∑–¥–∞–Ω: {account['created_at']}\n\n"
                
                if len(accounts) > 10:
                    text += f"... –∏ –µ—â–µ {len(accounts) - 10} –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
            
        except Exception as e:
            text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}"
        
        keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="admin_back")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
